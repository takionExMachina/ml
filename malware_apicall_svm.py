import numpy
from sklearn import preprocessing
from sklearn.feature_selection import mutual_info_classif
from sklearn.svm import SVC, LinearSVC
from sklearn import svm
import csv
import random
from sklearn.metrics import confusion_matrix

pratio = 0.7
dataset = open('malware_dataset/Android_Feats.csv', 'r')
reader = csv.reader(dataset)
data = list(reader)
data = random.sample(data, len(data))
data = numpy.array(data)
dataset.close()

cols = numpy.shape(data)[1]
y = data[:,cols-1]
y = numpy.array(y)
y = numpy.ravel(y, order='C')
x = data[:,:cols-1]
x = x.astype(numpy.float)
x = preprocessing.scale(x)

features = [i.strip() for i in open("malware_dataset/Android_Feats.csv").readlines()]
features = numpy.array(features)
mi = mutual_info_classif(x,y)
featureind = sorted(range(len(mi)), key=lambda i: mi[i], reverse=True)[:50]
select_feats = features[featureind]

prows = int(pratio*len(data))
traind = x[:prows, featureind]
trainl = y[:prows]
testd = x[prows:, featureind]
testl = y[prows:]

clf = svm.SVC()
clf.fit(traind, trainl)
score = clf.score(testd, testl)
print("Score: ", score*100)

result = clf.predict(testd)
cm = confusion_matrix(testl, result)
print("FP: %f %%" % ((cm[0][1]/float(sum(cm[0])))*100))
print("FN: %f %%" % ((cm[1][0]/float(sum(cm[1])))*100))
