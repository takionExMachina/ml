import os
import imageio
import array
import numpy
import leargist
import Image
import csv

# based on Malware Images: Visualization and
# Automatic Classification from Nataraj et.al
def get_width(size):
    size = size/1000
    if size < 10:
        width = 32
    elif size >= 10 and size < 30:
        width = 64
    elif size >= 30 and size < 60:
        width = 128
    elif size >= 60 and size < 100:
        width = 256
    elif size >= 100 and size < 200:
        width = 384
    elif size >=200 and size < 500:
        width = 512
    elif size <= 500 and size < 1000:
        width = 768
    elif size >= 1000:
        width = 1024
    return width

def dir_walker(dirname):
    for malware in os.listdir(dirname):
        filename = dirname + malware
        print("Converting malware: %s" % filename)
        size = os.path.getsize(filename)
        print("Malware size: %d Bytes" % size)
        width = get_width(size)
        print("Malware width: %d" % width)
        malware_image(width, filename, size)

def malware_image(width, filename, size):
    f = open(filename, 'rb')
    rem = size%width
    a = array.array("B")
    a.fromfile(f, size - rem)
    f.close()
    g = numpy.reshape(a, (len(a)/width, width))
    g = numpy.uint8(g)
    imagename = filename + '.png'
    print("Saving image as: %s" % (imagename))
    imageio.imwrite(imagename, g)
    #print("Extracting features from: %s" % imagename)
    #feature_extract(imagename)

#USE GIST (global image descriptors)
def feature_extract(imagename):
    image = Image.open(imagename)
    new_image = image.resize((64, 64))
    des = leargist.color_gist(new_image)
    feature_vector = des[0:320]
    save_features(feature_vector)

def save_features(vector):
    a = numpy.asarray(vector)
    row = a.reshape(-1)
    print(row)
"""
    with open('features.csv', 'a+') as features_file:
        writer = csv.writer(features_file)
        writer.writerow(a)
    print("Features saved into: %s" % ('features.csv'))
"""

def main():
    #append / to dirname
    dir_walker('malware_dataset/malware_samples/')

main()
