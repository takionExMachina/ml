import pandas
import numpy
from sklearn.metrics import confusion_matrix
from sklearn.feature_selection import SelectFromModel
from sklearn.ensemble import ExtraTreesClassifier
from sklearn.model_selection import train_test_split
from sklearn import cross_validation
import sklearn

dataset = pandas.read_csv('malware_dataset/dataset.csv', sep=';',low_memory=False)
benign = dataset[0:8057].drop(['LABEL'], axis=1)
malware = dataset[8057::].drop(['LABEL'], axis=1)
print('features: %i\n' % benign.shape[1])

data = dataset.drop(['name','.//MD5','version', './/Signature','.//Organization','.//Locality','.//Country','.//State','description','rating_number','rating_count','LABEL','.//Developer','.//Supported_CPU','.//Min_OpenGL','.//Min_Screen','.//Min_SDK'], axis=1).values
target = dataset['LABEL'].values
feat_select = ExtraTreesClassifier().fit(data, target)
model = SelectFromModel(feat_select, prefit=True)
data_new = model.transform(data)
print(data.shape)
print(data_new.shape)

#features = data_new.shape[1]
#index = numpy.argsort(ExtraTreesClassifier().fit(data, target).feature_importances_[::-1][:features])

#for feat in range(features):
#	print(dataset.columns[index[feat]])

benign_train, benign_test, malware_train, malware_test = cross_validation.train_test_split(data_new, target, test_size=0.33)

clf = sklearn.ensemble.RandomForestClassifier(n_estimators=100)
clf.fit(benign_train, malware_train)
score = clf.score(benign_test, malware_test)
print("RandomForestClassifier score: ", score*100)

clf = sklearn.ensemble.AdaBoostClassifier()
clf.fit(benign_train, malware_train)
score = clf.score(benign_test, malware_test)
print("AdaBoostClassifier score: ", score*100)

clf = sklearn.tree.DecisionTreeClassifier()
clf.fit(benign_train, malware_train)
score = clf.score(benign_test, malware_test)
print("DecisionTreeClassifier score: ", score*100)

